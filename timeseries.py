# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L10_0dOPz0B8NO1CBmxyOC6qVobK2G3O
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm

#df = pd.read_csv("olist_orders_dataset_1.csv")
# cols = ['order_id','customer_id','order_status','order_approved_at','order_delivered_carrier_date','order_delivered_customer_date','order_estimated_delivery_date']
# df.drop(cols,axis=1,inplace=True)
# df['order_purchase_timestamp'] = pd.to_datetime(df['order_purchase_timestamp'])
# df['date'] = df['order_purchase_timestamp']
# df.head()

df.isnull().sum()

# df1 = df['order_purchase_timestamp'].dt.date.value_counts().sort_index().reset_index()
# df1.columns = ['timestamp','Count']
# df1['timestamp'] = pd.to_datetime(df1['timestamp'])
# df1.at[603,'Count']=155
# df1.at[602,'Count']=165
# df1.at[601,'Count']=195
# df1.at[600,'Count']=145
# df1.at[599,'Count']=155
# df1.at[598,'Count']=165
# df1.at[597,'Count']=195
# df1.at[596,'Count']=145
df1 = pd.read_csv('data3.csv')
df1.columns = ['orderId','timestamp','Count']
df1['timestamp'] = pd.to_datetime(df1['timestamp'])
df1.tail(20)

df1 = df1.groupby('timestamp')['Count']

df1 = df1.set_index('timestamp')
df1.tail()

y = df1['Count']
y['2017':]

y.plot(figsize=(15,6))
plt.show()

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
decomposition = sm.tsa.seasonal_decompose(y, model='additive')
fig = decomposition.plot()
plt.show()

import itertools
p = d = q = range(0, 2)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]
print('Examples of parameter combinations for Seasonal ARIMA...')
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))

import warnings
warnings.filterwarnings('ignore')
for param in pdq:
    for param_seasonal in seasonal_pdq:
        try:
            mod = sm.tsa.statespace.SARIMAX(y,
                                            order=param,
                                            seasonal_order=param_seasonal,
                                            enforce_stationarity=False,
                                            enforce_invertibility=False)
            results = mod.fit()

            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))
        except:
            continue

mod = sm.tsa.statespace.SARIMAX(y,
                                order=(1, 0, 1),
                                seasonal_order=(1, 1, 0, 24),
                                enforce_stationarity=False,
                                enforce_invertibility=False)
results = mod.fit()
print(results.summary().tables[1])

results.plot_diagnostics(figsize=(16, 8))
plt.show()

pred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)
pred_ci = pred.conf_int()
ax = y['2017':].plot(label='observed')
pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Date')
ax.set_ylabel('Orders')
plt.legend()
plt.show()

y_forecasted = pred.predicted_mean
y_truth = y['2017-01-01':]
mse = ((y_forecasted - y_truth) ** 2).mean()
print('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))

print('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))

pred_uc = results.get_forecast(steps=59)
pred_ci = pred_uc.conf_int()
ax = y.plot(label='observed', figsize=(14, 7))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Date')
ax.set_ylabel('Orders')
plt.legend()
plt.show()

pred_uc.predicted_mean.to_csv('abc.csv',index = False, header=True)

pred_uc.predicted_mean

testing = pd.read_csv('testing.csv')
testing.head(26)

import matplotlib.pyplot as plt
plt.plot(testing['timestamp'],testing['Count'])
plt.plot(testing['timestamp'],pred_uc.predicted_mean)
# plt.plot(testing['timestamp'],pred_ci.iloc[:, 1])
plt.legend()

plt.plot(testing['timestamp'],testing['Count'])
# plt.plot(testing['timestamp'],pred_uc.predicted_mean)
plt.plot(testing['timestamp'],pred_ci.iloc[:, 1],color='green')
plt.legend()

